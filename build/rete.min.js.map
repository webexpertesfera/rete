{"version":3,"file":"rete.min.js","sources":["../src/engine/component.js","../src/control.js","../src/connection.js","../src/io.js","../src/socket.js","../src/input.js","../src/output.js","../src/node.js","../src/component.js","../src/core/events.js","../src/core/emitter.js","../src/core/validator.js","../src/core/context.js","../src/engine/events.js","../src/engine/index.js","../src/events.js","../src/view/drag.js","../src/view/zoom.js","../src/view/area.js","../src/view/control.js","../src/view/socket.js","../src/view/node.js","../src/view/connection.js","../src/view/index.js","../src/selected.js","../src/editor.js","../src/index.js"],"sourcesContent":["export class Component {\n    constructor(name) {\n        if (this.constructor === Component)\n            throw new TypeError('Can not construct abstract class.');\n        \n        this.name = name;\n        this.data = {};\n        this.engine = null;\n    }\n\n    worker() { }\n}","import { Node } from './node';\n\nexport class Control {\n\n    constructor(key) {\n        if (this.constructor === Control)\n            throw new TypeError('Can not construct abstract class.');\n        \n        this.key = key;\n        this.data = {};\n        this.parent = null;\n    }\n\n    getNode() {\n        if (this.parent === null)\n            throw new Error(\"Control isn't added to Node/Input\");   \n        \n        return this.parent instanceof Node ? this.parent : this.parent.node;\n    }\n\n    getData(key) {\n        return this.getNode().data[key];\n    }\n\n    putData(key, data) {\n        this.getNode().data[key] = data;\n    }  \n}","export class Connection {\n\n    constructor(output, input) {\n        this.output = output;\n        this.input = input;\n        this.data = {};\n\n        this.input.addConnection(this);\n    }\n\n    remove() {\n        this.input.removeConnection(this);\n        this.output.removeConnection(this);\n    }\n}","import { Connection } from './connection';\n\nexport class IO {\n\n    constructor(key, name, socket, multiConns) {\n\t    this.node = null;\n        this.multipleConnections = multiConns;\n        this.connections = [];\n\t   \n        this.key = key;\n        this.name = name;\n        this.socket = socket;\n    }\n    \n    removeConnection(connection: Connection) {\n        this.connections.splice(this.connections.indexOf(connection), 1);\n    }\n\n    removeConnections() {\n        this.connections.map(connection => this.removeConnection(connection));\n    }\n}","export class Socket {\n\n    constructor(name: string, data = {}) {\n        this.name = name;\n        this.data = data;\n        this.compatible = [];\n    }\n\n    combineWith(socket: Socket) {\n        this.compatible.push(socket);\n    }\n\n    compatibleWith(socket: Socket) {\n        return this === socket || this.compatible.includes(socket);\n    }\n}","import { Connection } from './connection';\nimport { Control } from './control';\n// import { Output } from './output';\n\nimport { IO } from './io';\nimport { Socket } from './socket';\n\nexport class Input extends IO {\n   \n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = false) {\n        super(key, title, socket, multiConns);\n        this.control = null;\n        this.output = null;\n    }\n\n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    addConnection(connection: Connection) {\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Multiple connections not allowed');\n        this.connections.push(connection);\n    }\n\n    addControl(control: Control) {\n        this.control = control;\n        control.parent = this;\n    }\n\n    // addOutput(output) {\n    //     this.output = output;\n    //     //output.parent = this;\n    // }\n\n    showControl() {\n        return !this.hasConnection() && this.control !== null;\n    }\n\n    toJSON() {\n        return {\n            'connections': this.connections.map(c => {\n                return {\n                    node: c.output.node.id,\n                    output: c.output.key,\n                    data: c.data\n                };\n            })\n        };\n    }\n}","import { Connection } from './connection';\nimport { IO } from './io';\nimport { Input } from './input';\nimport { Socket } from './socket';\n\nexport class Output extends IO {\n  \n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = true) {\n        super(key, title, socket, multiConns);\n    }\n    \n    hasConnection() {\n        return this.connections.length > 0;\n    }\n\n    connectTo(input: Input) {\n        if (!this.socket.compatibleWith(input.socket))\n            throw new Error('Sockets not compatible');\n        if (!input.multipleConnections && input.hasConnection())\n            throw new Error('Input already has one connection');\n        if (!this.multipleConnections && this.hasConnection())\n            throw new Error('Output already has one connection');\n\n        var connection = new Connection(this, input);\n\n        this.connections.push(connection);\n        return connection;\n    }\n\n    connectedTo(input: Input) {\n        return this.connections.some((item) => {\n            return item.input === input;\n        });\n    }\n\n    toJSON() {\n        return {\n            'connections': this.connections.map(c => {\n                return {\n                    node: c.input.node.id,\n                    input: c.input.key,\n                    data: c.data\n                }\n            })\n        };\n    }\n}","import { Control } from './control';\nimport { Input } from './input';\nimport { Output } from './output';\n\nexport class Node {\n   \n    constructor(name: string) {\n        this.name = name;\n        this.id = Node.incrementId();\n        this.position = [0.0, 0.0];\n\n        this.inputs = new Map();\n        this.outputs = new Map();\n        this.controls = new Map();\n        this.data = {};\n        this.meta = {};\n    }\n\n    addControl(control: Control) {\n        control.parent = this;\n\n        this.controls.set(control.key, control);\n        return this;\n    }\n\n    removeControl(control: Control) {\n        control.parent = null;\n\n        this.controls.delete(control.key);\n    }\n\n    addInput(input: Input) {\n        if (input.node !== null)\n            throw new Error('Input has already been added to the node');\n \n        input.node = this;\n\n        this.inputs.set(input.key, input);\n        return this;\n    }\n\n    removeInput(input: Input) {\n        input.removeConnections();\n        input.node = null;\n\n        this.inputs.delete(input.key);\n    }\n\n    addOutput(output: Output) {\n        if (output.node !== null)\n            throw new Error('Output has already been added to the node');\n        \n        output.node = this;\n\n        this.outputs.set(output.key, output);\n        return this;\n    }\n\n    removeOutput(output: Output) {\n        output.removeConnections();\n        output.node = null;\n\n        this.outputs.delete(output.key);\n    }\n\n    getConnections() {\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\n        const connections = ios.reduce((arr, io) => {\n            return [...arr, ...io.connections];\n        }, []);\n    \n        return connections;\n    }\n\n    static incrementId() {\n        if (!this.latestId)\n            this.latestId = 1\n        else\n            this.latestId++\n        return this.latestId\n    }\n\n    toJSON() {\n        return {\n            'id': this.id,\n            'data': this.data,\n            'inputs': Array.from(this.inputs).reduce((obj, [key, input]) => (obj[key] = input.toJSON(), obj), {}),\n            'outputs': Array.from(this.outputs).reduce((obj, [key, output]) => (obj[key] = output.toJSON(), obj), {}),\n            'position': this.position,\n            'name': this.name\n        }\n    }\n\n    static fromJSON(json: Object) {\n        const node = new Node(json.name);\n\n        node.id = json.id;\n        node.data = json.data;\n        node.position = json.position;\n        node.name = json.name;\n        Node.latestId = Math.max(node.id, Node.latestId);\n\n        return node;\n    }\n}\n","import { Component as ComponentWorker } from './engine/component';\nimport { Node } from './node';\n\nexport class Component extends ComponentWorker {\n    constructor(name) {\n        super(name);\n        if (this.constructor === Component)\n            throw new TypeError('Can not construct abstract class.');\n\n        this.editor = null;\n        this.data = {};\n    }\n\n    async builder() { }\n\n    created() { }\n\n    destroyed() { }\n\n    async build(node: Node) {\n        await this.builder(node);\n\n        return node;\n    }\n\n    async createNode(data = {}) {\n        const node = new Node(this.name);\n        \n        node.data = data;\n        await this.build(node);\n\n        return node;\n    }\n}","export class Events {\n\n    constructor(handlers) {\n        this.handlers = {\n            warn: [console.warn],\n            error: [console.error],\n            ...handlers\n        };\n    }    \n}","import { Events } from './events';\n\nexport class Emitter {\n\n    constructor(events: Events | Emitter) {\n        this.events = events instanceof Emitter ? events.events : events.handlers;\n        this.silent = false;\n    }\n\n    on(names: string, handler: () => {}) {\n        names.split(' ').forEach(name => {\n            if (!this.events[name])\n                throw new Error(`The event ${name} does not exist`);\n            this.events[name].push(handler);\n        });\n\n        return this;\n    }\n\n    trigger(name: string, params) {\n        if (!(name in this.events))\n            throw new Error(`The event ${name} cannot be triggered`);\n\n        return this.events[name].reduce((r, e) => {\n            return (e(params) !== false) && r\n        }, true); // return false if at least one event is false        \n    }\n}","export class Validator {\n\n    static isValidData(data) {\n        return typeof data.id === 'string' &&\n            this.isValidId(data.id) &&\n            data.nodes instanceof Object && !(data.nodes instanceof Array);\n    }\n\n    static isValidId(id) {\n        return /^[\\w-]{3,}@[0-9]+\\.[0-9]+\\.[0-9]+$/.test(id);\n    }\n\n    static validate(id, data) {\n        var msg = '';\n        var id1 = id.split('@');\n        var id2 = data.id.split('@');\n\n        if (!this.isValidData(data))\n            msg += 'Data is not suitable. '; \n        if (id !== data.id)\n            msg += 'IDs not equal. ';\n        if (id1[0] !== id2[0])\n            msg += 'Names don\\'t match. ';\n        if (id1[1] !== id2[1])\n            msg += 'Versions don\\'t match';\n\n        return { success: msg ==='', msg };\n    }\n}","import { Emitter } from './emitter'\nimport { Validator } from './validator'\n\nexport class Context extends Emitter {\n\n    constructor(id, events) {\n        super(events);\n\n        if (!Validator.isValidId(id))\n            throw new Error('ID should be valid to name@0.1.0 format');  \n        \n        this.id = id;\n    }\n\n    use(plugin, options = {}) {\n        plugin.install(this, options);\n    }\n}","import { Events } from '../core/events';\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({\n            componentregister: []\n        });\n    }    \n}","import { Component } from './component';\nimport { Context } from '../core/context';\nimport { EngineEvents } from './events';\nimport { Validator } from '../core/validator';\n\nvar State = { AVALIABLE:0, PROCESSED: 1, ABORT: 2 };\n\nexport { Component };\n\nexport class Engine extends Context {\n\n    constructor(id: string) {\n        super(id, new EngineEvents());\n\n        this.components = [];\n        this.args = [];\n        this.data = null;\n        this.state = State.AVALIABLE;\n        this.onAbort = () => { };\n    }\n\n    clone() {\n        const engine = new Engine(this.id);\n\n        this.components.map(c => engine.register(c));\n\n        return engine;\n    }\n\n    register(component: Component) {\n        this.components.push(component);\n        this.trigger('componentregister', component);\n    }\n\n    async throwError (message, data = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    extractInputNodes(node, nodes) {\n        return Object.keys(node.inputs).reduce((a, key) => {\n            return [...a, ...(node.inputs[key].connections || []).reduce((b, c) => [...b, nodes[c.node]], [])]\n        }, []);\n    }\n\n    detectRecursions(nodes) {\n        const nodesArr = Object.keys(nodes).map(id => nodes[id]);\n        const findSelf = (node, inputNodes) => {\n            if (inputNodes.some(n => n === node))\n                return node;\n            \n            for (var i = 0; i < inputNodes.length; i++) {\n                if (findSelf(node, this.extractInputNodes(inputNodes[i], nodes)))\n                    return node;\n            }\n\n            return null;\n        }\n\n        return nodesArr.map(node => {\n            return findSelf(node, this.extractInputNodes(node, nodes))\n        }).filter(r => r !== null);\n    }\n\n    processStart() {\n        if (this.state === State.AVALIABLE) {  \n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    processDone() {\n        var success = this.state !== State.ABORT;\n\n        this.state = State.AVALIABLE;\n        \n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }    \n\n        return success;\n    }\n\n    async abort() {\n        return new Promise(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    async lock(node) {\n        return new Promise(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else \n                res();\n            \n            node.busy = true;\n        });    \n    }\n\n    unlock(node) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    async extractInputData(node) {\n        const obj = {};\n\n        for (let key of Object.keys(node.inputs)) {\n            let input = node.inputs[key];\n            var conns = input.connections;\n            let connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = this.data.nodes[c.node];\n\n                let outputs = await this.processNode(prevNode);\n\n                if (!outputs) \n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    async processWorker(node) {\n        var inputData = await this.extractInputData(node);\n        var component = this.components.find(c => c.name === node.name);\n        var outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e);\n        }\n\n        return outputData;\n    }\n\n    async processNode(node) {\n        if (this.state === State.ABORT || !node)\n            return null;\n        \n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = this.processWorker(node)\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    async forwardProcess(node) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n\n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = this.data.nodes[c.node];\n\n                await this.processNode(nextNode);\n                await this.forwardProcess(nextNode);\n            }));\n        }));\n    }\n\n    copy(data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n        \n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data) {\n        var checking = Validator.validate(this.id, data);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);  \n        \n        var recurentNodes = this.detectRecursions(data.nodes);\n\n        if (recurentNodes.length > 0)\n            return await this.throwError('Recursion detected', recurentNodes);      \n         \n        return true;\n    }\n\n    async processStartNode(id) {\n        if (id) {\n            let startNode = this.data.nodes[id];\n\n            if (!startNode)\n                return await this.throwError('Node with such id not found');   \n            \n            await this.processNode(startNode);\n            await this.forwardProcess(startNode);\n        }\n    }\n\n    async processUnreachable() {\n        for (var i in this.data.nodes) // process nodes that have not been reached\n            if (typeof this.data.nodes[i].outputData === 'undefined') {\n                var node = this.data.nodes[i];\n\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n    }\n\n    async process(data: Object, startId: ?number = null, ...args) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;    \n        \n        this.data = this.copy(data);\n        this.args = args;\n\n        await this.processStartNode(startId);\n        await this.processUnreachable();\n        \n        return this.processDone()?'success':'aborted';\n    }\n}","import { Events } from './core/events';\n\nexport class EditorEvents extends Events {\n\n    constructor() {\n        super({\n            nodecreate: [],\n            nodecreated: [],\n            noderemove: [],\n            noderemoved: [],\n            connectioncreate: [],\n            connectioncreated: [],\n            connectionremove: [],\n            connectionremoved: [],\n            nodetranslate: [],\n            nodetranslated: [],\n            selectnode: [],\n            nodeselect: [],\n            nodeselected: [],\n            rendernode: [],\n            rendersocket: [],\n            rendercontrol: [],\n            renderconnection: [],\n            componentregister: [],\n            keydown: [],\n            keyup: [],\n            translate: [],\n            translated: [],\n            zoom: [],\n            zoomed: [],\n            click: [],\n            mousemove: [],\n            contextmenu: [],\n            import: [],\n            export: [],\n            process: []\n        });\n    }    \n}","export class Drag {\n\n    constructor(el, onTranslate = () => {}, onStart = () => {}, onDrag = () => {}) {\n        this.mouseStart = null;\n\n        this.el = el;\n        this.onTranslate = onTranslate;\n        this.onStart = onStart;\n        this.onDrag = onDrag;\n\n        this.initEvents(el);\n    }\n\n    initEvents(el) {\n        el.addEventListener('mousedown', this.down.bind(this));\n        window.addEventListener('mousemove', this.move.bind(this));\n        window.addEventListener('mouseup', this.up.bind(this));\n\n        el.addEventListener('touchstart', this.down.bind(this));\n        window.addEventListener('touchmove', this.move.bind(this), {\n            passive: false\n        });\n        window.addEventListener('touchend', this.up.bind(this));\n    }\n\n    getCoords(e) {\n        const props = e.touches ? e.touches[0] : e;\n\n        return [props.pageX, props.pageY];\n    }\n\n    down(e) {\n        e.stopPropagation();\n        this.mouseStart = this.getCoords(e);\n\n        this.onStart(e);\n    }\n\n    move(e) {\n        if (!this.mouseStart) return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        let [x, y] = this.getCoords(e);\n        let delta = [x - this.mouseStart[0], y - this.mouseStart[1]];\n        let zoom = this.el.getBoundingClientRect().width / this.el.offsetWidth;\n\n        this.onTranslate(delta[0] / zoom, delta[1] / zoom, e);\n    }\n\n    up(e) {\n        if (!this.mouseStart) return;\n        \n        this.mouseStart = null;\n        this.onDrag(e);\n    }\n}","export class Zoom {\n\n    constructor(container, el, intensity, onzoom) {\n        this.el = el;\n        this.intensity = intensity;\n        this.onzoom = onzoom;\n\n        this.distance = null;\n\n        container.addEventListener('wheel', this.wheel.bind(this));\n        container.addEventListener('touchmove', this.move.bind(this));\n        container.addEventListener('touchend', this.end.bind(this));\n        container.addEventListener('touchcancel', this.end.bind(this));\n    }\n\n    wheel(e) {\n        e.preventDefault();\n        \n        var rect = this.el.getBoundingClientRect();\n        var delta = (e.wheelDelta ? e.wheelDelta / 120 : - e.deltaY / 3) * this.intensity;\n\n        var ox = (rect.left - e.clientX) * delta;\n        var oy = (rect.top - e.clientY) * delta;\n\n        this.onzoom(delta, ox, oy);\n    }\n\n    touches(e) {\n        \n        let [x1, y1] = [e.touches[0].clientX, e.touches[0].clientY];\n        let [x2, y2] = [e.touches[1].clientX, e.touches[1].clientY];\n        let distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\n        return {\n            cx: (x1 + x2)/2,\n            cy: (y1 + y2)/2,\n            distance\n        };\n    }\n\n    move(e) {\n        if (e.touches.length < 2) return;\n        \n        let rect = this.el.getBoundingClientRect();\n        let { cx, cy, distance } = this.touches(e);\n\n        if (this.distance !== null) {\n            let delta = distance / this.distance - 1;\n    \n            var ox = (rect.left - cx) * delta;\n            var oy = (rect.top - cy) * delta;\n\n            this.onzoom(delta, ox, oy);\n        }\n        this.distance = distance;\n    }\n\n    end() {\n        this.distance = null;\n    }\n}","import { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { Zoom } from './zoom';\n\nexport class Area extends Emitter {\n\n    constructor(container, emitter: Emitter) {\n        super(emitter);\n        \n        const el = this.el = document.createElement('div');\n\n        this.container = container;\n        this.transform = { k: 1, x: 0, y: 0 };\n        this.mouse = { x: 0, y: 0 }\n\n        el.style.transformOrigin = '0 0';\n\n        this._startPosition = null;\n        this._zoom = new Zoom(container, el, 0.1, this.onZoom.bind(this));\n        this._drag = new Drag(container, this.onTranslate.bind(this), this.onStart.bind(this));\n        this.container.addEventListener('mousemove', this.mousemove.bind(this));\n\n        this.update();\n    }\n\n    update() {\n        const t = this.transform;\n\n        this.el.style.transform = `translate(${t.x}px, ${t.y}px) scale(${t.k})`;\n    }\n\n    mousemove(e) {\n        const rect = this.el.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const k = this.transform.k;\n        \n        this.mouse = { x: x / k, y: y / k };\n        this.trigger('mousemove', { ...this.mouse });\n    }\n\n    onStart() {\n        this._startPosition = { ...this.transform };\n    }\n\n    onTranslate(dx, dy) {\n        this.translate(this._startPosition.x + dx, this._startPosition.y + dy)\n    }\n\n    onZoom(delta, ox, oy) {\n        this.zoom(this.transform.k * (1 + delta), ox, oy);\n\n        this.update();\n    }\n\n    translate(x, y) {\n        const params = { transform: this.transform, x, y };\n\n        if (!this.trigger('translate', params)) return;\n\n        this.transform.x = params.x;\n        this.transform.y = params.y;\n\n        this.update();\n        this.trigger('translated');\n    }\n\n    zoom(zoom, ox = 0, oy = 0) {\n        const k = this.transform.k;\n        const params = { transform: this.transform, zoom };\n\n        if (!this.trigger('zoom', params)) return;\n        \n        const d = (k - params.zoom) / ((k - zoom) || 1);\n\n        this.transform.k = params.zoom || 1;\n        this.transform.x += ox * d;\n        this.transform.y += oy * d;\n\n        this.update();\n        this.trigger('zoomed');\n    }\n\n    appendChild(el) {\n        this.el.appendChild(el)\n    }\n\n    removeChild(el) {\n        this.el.removeChild(el)\n    }\n}","import { Emitter } from '../core/emitter';\n\nexport class Control extends Emitter {\n\n    constructor(el, control, emitter) {\n        super(emitter);\n        this.trigger('rendercontrol', { el, control });\n    }\n}","import { Emitter } from '../core/emitter';\n\nexport class Socket extends Emitter {\n\n    constructor(el, type, io, node, emitter) {\n        super(emitter);\n        this.el = el;\n        this.type = type;\n        this.io = io;\n        this.node = node;\n\n        this.trigger('rendersocket', { el, [type]: this.io, socket: io.socket });\n    }\n\n    getPosition({ position }) {\n        const el = this.el;\n\n        return [\n            position[0] + el.offsetLeft + el.offsetWidth / 2,\n            position[1] + el.offsetTop + el.offsetHeight / 2\n        ]\n    }\n}","import { Control } from '../control';\nimport { Drag } from './drag';\nimport { Emitter } from '../core/emitter';\nimport { IO } from '../io';\nimport { Control as ViewControl } from './control';\nimport { Socket as ViewSocket } from './socket';\n\nexport class Node extends Emitter {\n\n    constructor(node, component, emitter) {\n        super(emitter);\n\n        this.node = node;\n        this.component = component;\n        this.sockets = new Map();\n        this.controls = new Map();\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n\n        this.el.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, node: this.node }));\n\n        this._startPosition = null;\n        this._drag = new Drag(this.el, this.onTranslate.bind(this), this.onSelect.bind(this));\n\n        this.trigger('rendernode', {\n            el: this.el, \n            node, \n            component: component.data, \n            bindSocket: this.bindSocket.bind(this),\n            bindControl: this.bindControl.bind(this)\n        });\n\n        this.update();\n    }\n\n    bindSocket(el: HTMLElement, type: string, io: IO) {\n        this.sockets.set(io, new ViewSocket(el, type, io, this.node, this));\n    }\n\n    bindControl(el: HTMLElement, control: Control) {\n        this.controls.set(control, new ViewControl(el, control, this));\n    }\n\n    getSocketPosition(io) {\n        return this.sockets.get(io).getPosition(this.node);\n    }\n\n    onSelect(e) {        \n        this._startPosition = [...this.node.position];\n        this.trigger('selectnode', { node: this.node, accumulate: e.ctrlKey });\n    }\n\n    onTranslate(dx, dy) {\n        const x = this._startPosition[0] + dx;\n        const y = this._startPosition[1] + dy;\n\n        this.translate(x, y);\n    }\n\n    translate(x, y) {\n        const node = this.node;\n        const params = { node, x, y };\n\n        if (!this.trigger('nodetranslate', params)) return;\n\n        const prev = [...node.position];\n\n        node.position[0] = params.x;\n        node.position[1] = params.y;\n\n        this.update();\n        this.trigger('nodetranslated', { node, prev });\n    }\n\n    update() {\n        this.el.style.transform = `translate(${this.node.position[0]}px, ${this.node.position[1]}px)`;\n    }\n\n    remove() {\n        \n    }\n}","import { Emitter } from '../core/emitter';\nimport { Node as ViewNode } from './node';\n\nexport class Connection extends Emitter {\n\n    constructor(connection, inputNode: ViewNode, outputNode: ViewNode, emitter) {\n        super(emitter);\n        this.connection = connection;\n        this.inputNode = inputNode;\n        this.outputNode = outputNode;\n\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n        this.el.style.zIndex = '-1';\n\n        this.update();\n    }\n\n    update() {\n        const [x1, y1] = this.outputNode.getSocketPosition(this.connection.output);\n        const [x2, y2] = this.inputNode.getSocketPosition(this.connection.input);\n\n        this.trigger('renderconnection', { el: this.el, connection: this.connection, x1, y1, x2, y2 });\n    }\n}","import { Area } from './area';\nimport { Connection } from '../connection';\nimport { Emitter } from '../core/emitter';\nimport { Node } from '../node';\nimport { Connection as ViewConnection } from './connection';\nimport { Node as ViewNode } from './node';\n\nexport class EditorView extends Emitter {\n\n    constructor(container: HTMLElement, components: Object, emitter: Emitter) {\n        super(emitter);\n\n        this.container = container;\n        this.components = components;\n\n        this.container.style.overflow = 'hidden';\n\n        this.nodes = new Map();\n        this.connections = new Map();\n\n        this.container.addEventListener('click', this.click.bind(this));\n        this.container.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, view: this }));\n        window.addEventListener('resize', this.resize.bind(this));\n\n        this.on('nodetranslated', this.updateConnections.bind(this));\n            \n        this.area = new Area(container, this);\n        this.container.appendChild(this.area.el);\n    }\n\n    addNode(node: Node) {\n        const nodeView = new ViewNode(node, this.components.get(node.name), this);\n\n        this.nodes.set(node, nodeView);\n        this.area.appendChild(nodeView.el);\n    }\n\n    removeNode(node: Node) {\n        const nodeView = this.nodes.get(node);\n\n        this.nodes.delete(node);\n        this.area.removeChild(nodeView.el);\n    }\n\n    addConnection(connection: Connection) {\n        const viewInput = this.nodes.get(connection.input.node);\n        const viewOutput = this.nodes.get(connection.output.node);\n        const connView = new ViewConnection(connection, viewInput, viewOutput, this);\n\n        this.connections.set(connection, connView);\n        this.area.appendChild(connView.el);\n    }\n\n    removeConnection(connection: Connection) {\n        const connView = this.connections.get(connection);\n\n        this.connections.delete(connection);\n        this.area.removeChild(connView.el);\n    }\n\n    updateConnections({ node }) {\n        node.getConnections().map(conn => {\n            this.connections.get(conn).update();\n        });\n    }\n\n    resize() {\n        const { container } = this;\n        const width = container.parentElement.clientWidth;\n        const height = container.parentElement.clientHeight;\n\n        container.style.width = width + 'px';\n        container.style.height = height + 'px';\n    }\n\n    click(e) {\n        const container = this.container;\n        \n        if (container !== e.target) return;\n        if (!this.trigger('click', { e, container })) return;\n    }\n}\n","import { Node } from './node';\n\nexport class Selected {\n\n    constructor() {\n        this.list = [];\n    }\n\n    add(item: Node, accumulate = false) {\n        if (accumulate) {\n            if (this.contains(item))\n                this.remove(item);\n            else\n                this.list.push(item);\n        }\n        else\n            this.list = [item];    \n    }\n\n    clear() {\n        this.each(item => {\n            this.remove(item);\n        });\n    }\n\n    remove(item) {\n        this.list.splice(this.list.indexOf(item), 1);\n    }\n\n    contains(item) {\n        return this.list.indexOf(item) !== -1;\n    }\n\n    each(callback) {\n        this.list.forEach(callback);\n    }\n}","import { Component } from './component';\nimport { Connection } from './connection';\nimport { Context } from './core/context';\nimport { EditorEvents } from './events';\nimport { EditorView } from './view/index';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { Output } from './output';\nimport { Selected } from './selected';\nimport { Validator } from './core/validator';\n\nexport class NodeEditor extends Context {\n\n    constructor(id: string, container: HTMLElement) {\n        super(id, new EditorEvents());\n        \n        this.nodes = [];\n        this.components = new Map();\n\n        this.selected = new Selected();\n        this.view = new EditorView(container, this.components, this);\n\n        window.addEventListener('keydown', e => this.trigger('keydown', e));\n        window.addEventListener('keyup', e => this.trigger('keyup', e));\n        this.on('nodecreated', node => this.getComponent(node.name).created(node));\n        this.on('noderemoved', node => this.getComponent(node.name).destroyed(node));\n        this.on('selectnode', ({ node, accumulate }) => this.selectNode(node, accumulate));\n    }\n\n    addNode(node: Node) {\n        if (!this.trigger('nodecreate', node)) return;\n\n        this.nodes.push(node);\n        this.view.addNode(node);\n        \n        this.trigger('nodecreated', node);\n    }\n\n    removeNode(node: Node) {\n        if (!this.trigger('noderemove', node)) return;\n\n        node.getConnections().forEach(c => this.removeConnection(c));\n\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        this.view.removeNode(node);\n\n        this.trigger('noderemoved', node);\n    }\n\n    connect(output: Output, input: Input, data = {}) {\n        if (!this.trigger('connectioncreate', { output, input })) return;\n\n        try {\n            const connection = output.connectTo(input);\n\n            connection.data = data;\n            this.view.addConnection(connection);\n\n            this.trigger('connectioncreated', connection);\n        } catch (e) {\n            this.trigger('warn', e)\n        }\n    }\n\n    removeConnection(connection: Connection) {\n        if (!this.trigger('connectionremove', connection)) return;\n            \n        this.view.removeConnection(connection);\n        connection.remove();\n\n        this.trigger('connectionremoved', connection);\n    }\n\n    selectNode(node: Node, accumulate: boolean = false) {\n        if (this.nodes.indexOf(node) === -1) \n            throw new Error('Node not exist in list');\n        \n        if (!this.trigger('nodeselect', node)) return;\n\n        this.selected.add(node, accumulate);\n        \n        this.trigger('nodeselected', node);\n    }\n\n    getComponent(name) {\n        const component = this.components.get(name);\n\n        if (!component)\n            throw `Component ${name} not found`;\n        \n        return component;\n    }\n\n    register(component: Component) {\n        component.editor = this;\n        this.components.set(component.name, component);\n        this.trigger('componentregister', component)\n    }\n\n    clear() {\n        [...this.nodes].map(node => this.removeNode(node));\n    }\n\n    toJSON() {\n        const data = { id: this.id, nodes: {} };\n        \n        this.nodes.forEach(node => data.nodes[node.id] = node.toJSON());\n        this.trigger('export', data);\n        return data;\n    }\n\n    beforeImport(json: Object) {\n        var checking = Validator.validate(this.id, json);\n        \n        if (!checking.success) {\n            this.trigger('warn', checking.msg);\n            return false;\n        }\n        \n        this.silent = true;\n        this.clear();\n        this.trigger('import', json);\n        return true;\n    }\n\n    afterImport() {\n        this.silent = false;\n        return true;\n    }\n\n    async fromJSON(json: Object) {\n        if (!this.beforeImport(json)) return false;\n        var nodes = {};\n\n        try {\n            await Promise.all(Object.keys(json.nodes).map(async id => {\n                var node = json.nodes[id];\n                var component = this.getComponent(node.name);\n\n                nodes[id] = await component.build(Node.fromJSON(node));\n                this.addNode(nodes[id]);\n            }));\n        \n            Object.keys(json.nodes).forEach(id => {\n                var jsonNode = json.nodes[id];\n                var node = nodes[id];\n                \n                Object.keys(jsonNode.outputs).forEach(key => {\n                    var outputJson = jsonNode.outputs[key];\n\n                    outputJson.connections.forEach(jsonConnection => {\n                        var nodeId = jsonConnection.node;\n                        var data = jsonConnection.data;\n                        var targetOutput = node.outputs.get(key);\n                        var targetInput = nodes[nodeId].inputs.get(jsonConnection.input);\n\n                        this.connect(targetOutput, targetInput, data);\n                    });\n                });\n\n            });\n        }\n        catch (e) {\n            this.trigger('warn', e);\n            return !this.afterImport();\n        } finally {\n            return this.afterImport();\n        }\n    }\n}\n","import { Component } from './component';\nimport { Control } from './control';\nimport { Emitter } from './core/emitter';\nimport { Engine } from './engine/index';\nimport { Input } from './input';\nimport { Node } from './node';\nimport { NodeEditor } from './editor';\nimport { Output } from './output';\nimport { Socket } from './socket';\n\nexport default {\n    Component,\n    Control,\n    NodeEditor,\n    Emitter,\n    Engine,\n    Input,\n    Node,\n    Output,\n    Socket\n}"],"names":["Component","name","this","constructor","TypeError","data","engine","Control","key","parent","Error","Node","node","getNode","Connection","output","input","addConnection","removeConnection","IO","socket","multiConns","multipleConnections","connections","connection","splice","indexOf","map","_this","Socket","compatible","push","includes","Input","title","control","length","hasConnection","c","id","Output","compatibleWith","some","item","incrementId","position","inputs","Map","outputs","controls","meta","set","delete","removeConnections","values","reduce","arr","io","Array","from","obj","toJSON","latestId","json","Object","Math","max","editor","ComponentWorker","builder","build","Events","handlers","console","warn","error","Emitter","events","silent","names","handler","split","forEach","params","r","e","Validator","isValidId","nodes","test","msg","id1","id2","isValidData","success","Context","plugin","options","install","EngineEvents","State","Engine","components","args","state","onAbort","register","component","trigger","message","abort","processDone","keys","a","b","nodesArr","findSelf","inputNodes","n","i","_this2","extractInputNodes","filter","Promise","_this3","ret","unlockPool","busy","outputData","res","all","conns","_this4","processNode","prevNode","connData","extractInputData","find","worker","inputData","lock","processWorker","unlock","_this5","nextNode","forwardProcess","assign","validate","throwError","checking","detectRecursions","recurentNodes","startNode","startId","processStart","copy","processStartNode","processUnreachable","EditorEvents","Drag","el","onTranslate","onStart","onDrag","mouseStart","initEvents","addEventListener","down","bind","move","up","props","touches","pageX","pageY","stopPropagation","getCoords","preventDefault","x","y","delta","zoom","getBoundingClientRect","width","offsetWidth","Zoom","container","intensity","onzoom","distance","wheel","end","rect","wheelDelta","deltaY","ox","left","clientX","oy","top","clientY","x1","y1","x2","y2","sqrt","pow","cx","cy","Area","emitter","document","createElement","transform","k","mouse","style","transformOrigin","_startPosition","_zoom","onZoom","_drag","mousemove","update","t","dx","dy","translate","d","appendChild","removeChild","type","offsetLeft","offsetTop","offsetHeight","sockets","onSelect","bindSocket","bindControl","HTMLElement","ViewSocket","ViewControl","get","getPosition","accumulate","ctrlKey","prev","inputNode","outputNode","ViewNode","zIndex","getSocketPosition","EditorView","overflow","click","view","resize","on","updateConnections","area","nodeView","viewInput","viewOutput","connView","ViewConnection","getConnections","conn","parentElement","clientWidth","height","clientHeight","target","Selected","list","contains","remove","each","callback","NodeEditor","selected","getComponent","created","destroyed","selectNode","addNode","removeNode","connectTo","add","clear","beforeImport","fromJSON","jsonNode","nodeId","jsonConnection","targetOutput","targetInput","connect","afterImport"],"mappings":"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"}